plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.hibernate.orm:hibernate-spatial'
    implementation 'org.n52.jackson:jackson-datatype-jts:1.2.10'

    compileOnly 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    runtimeOnly 'org.postgresql:postgresql'
}

tasks.named('test') {
    useJUnitPlatform()
}

bootJar {
    doFirst {
        manifest {
            attributes(
                    'Implementation-Version': "${getDate()}"
            )
        }
    }
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}

tasks.register('copyFilesToReleaseDir', Task) {
    doLast {
        copy {
            from "build/libs"
            into "build/release"
        }

        copy {
            from "release"
            into "build/release"
        }

        copy {
            from "README.md", "docker-compose.yaml"
            into "build/release"
        }

        copy {
            from "build/resources/main"
            into "build/release/config"
            include 'application.yaml'
        }

    }
}

tasks.register('archiveReleaseDir', Zip) {
    from 'build/release/'
    include '*'
    include '**/**'
    getArchiveFileName().set("${archiveBaseName.get()}-${project.property('version')}-${getDate()}.zip")
    getDestinationDirectory().set(file('/build/releaseArchive/'))
    metadataCharset 'utf-8'
}

tasks.register('buildToRelease', GradleBuild) {
    buildName = "t1"
    tasks = ['clean', 'bootJar', 'copyFilesToReleaseDir', 'archiveReleaseDir']
}
